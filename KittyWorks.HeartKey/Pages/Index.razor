@page "/"
@using KittyWorks.HeartKey.Models
@inject IConfiguration _configuration
@inject HttpClient _httpClient



<TelerikChart Width="100%" Height="100%" @ref="_chart">
    <ChartSeriesItems>
        <ChartSeries Type="ChartSeriesType.Line"
                     Name="Beats"
                     Data="_days"
                     Field="TotalBeats"
                     CategoryField="DateTime"
                     Aggregate="ChartSeriesAggregate.Avg"
                     Style="ChartSeriesStyle.Smooth"
                     Color="Red">                     
        </ChartSeries>
        <ChartSeries Type="ChartSeriesType.Column"
                     Name="Offline"
                     Data="_days"
                     Field="Offline"
                     CategoryField="DateTime"
                     Aggregate="ChartSeriesAggregate.Avg"
                     Style="ChartSeriesStyle.Smooth"
                     Color="Grey">
            <ChartSeriesStack Enabled="true" />
        </ChartSeries>
        <ChartSeries Type="ChartSeriesType.Column"
                     Name="Normal"
                     Data="_days"
                     Field="OutOfRange"
                     CategoryField="DateTime"
                     Aggregate="ChartSeriesAggregate.Avg"
                     Style="ChartSeriesStyle.Smooth"
                     Color="Green">
            <ChartSeriesStack Enabled="true" />
        </ChartSeries>
        <ChartSeries Type="ChartSeriesType.Column"
                     Name="Fat Burn"
                     Data="_days"
                     Field="FatBurn"
                     CategoryField="DateTime"
                     Aggregate="ChartSeriesAggregate.Avg"
                     Style="ChartSeriesStyle.Smooth"
                     Color="Yellow">
            <ChartSeriesStack Enabled="true" />
        </ChartSeries>
        <ChartSeries Type="ChartSeriesType.Column"
                     Name="Cardio"
                     Data="_days"
                     Field="Cardio"
                     CategoryField="DateTime"
                     Aggregate="ChartSeriesAggregate.Avg"
                     Style="ChartSeriesStyle.Smooth"
                     Color="Orange">
            <ChartSeriesStack Enabled="true" />
        </ChartSeries>
        <ChartSeries Type="ChartSeriesType.Column"
                     Name="Peak"
                     Data="_days"
                     Field="Peak"
                     CategoryField="DateTime"
                     Aggregate="ChartSeriesAggregate.Avg"
                     Style="ChartSeriesStyle.Smooth"
                     Color="Red">
            <ChartSeriesStack Enabled="true" />
        </ChartSeries>
    </ChartSeriesItems>
    <ChartCategoryAxes>
        <ChartCategoryAxis BaseUnit="ChartCategoryAxisBaseUnit.Days" Type="ChartCategoryAxisType.Date"></ChartCategoryAxis>
    </ChartCategoryAxes>
    <ChartTitle Text="@(_days == null ? "Heartbeat" : "❤ Heartbeat ❤")"></ChartTitle>
</TelerikChart>

<div style="position: absolute; left: 10px; top: 10px;">
    <TelerikTextBox @bind-Value="_token" />
    <TelerikButton OnClick="LoadHeartbeatAsync" Enabled="_isTokenValid">Load</TelerikButton>
</div>

@code
{
    IList<DayInfo> _days = null;

    string _token = string.Empty;
    bool _isTokenValid => !string.IsNullOrEmpty(_token);

    TelerikChart _chart = null;

    protected override async Task OnInitializedAsync()
    {
        _token = _configuration["Fitbit:token"];

        if (!string.IsNullOrEmpty(_token))
        {
            await LoadHeartbeatAsync();
        }
    }

    async Task LoadHeartbeatAsync()
    {
        var from = DateTimeOffset.UtcNow.AddDays(-30);
        var to = DateTimeOffset.UtcNow.AddDays(0);
        var url = $"https://api.fitbit.com/1/user/-/activities/heart/date/{from:yyyy-MM-dd}/{to:yyyy-MM-dd}.json";

        _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _token);

        var heartbeat = await _httpClient.GetFromJsonAsync<Heartbeat>(url);

        _days = heartbeat.ActivitiesHeart.Select(CalculateDayInfo).ToList();
        _chart.Refresh();
    }

    DayInfo CalculateDayInfo(ActivitiesHeart activitiesHeart)
    {
        var offlineMinutes = 1440 - activitiesHeart.Value.HeartRateZones.Sum(x => x.Minutes);
        var totalBeats = activitiesHeart.Value.RestingHeartRate;

        return new DayInfo
        {
            DateTime = activitiesHeart.DateTime,
            TotalBeats = totalBeats,
            Offline = totalBeats * offlineMinutes / 1440,
            OutOfRange = totalBeats * activitiesHeart.Value.HeartRateZones[0].Minutes / 1440,
            FatBurn = totalBeats * activitiesHeart.Value.HeartRateZones[1].Minutes / 1440,
            Cardio = totalBeats * activitiesHeart.Value.HeartRateZones[2].Minutes / 1440,
            Peak = totalBeats * activitiesHeart.Value.HeartRateZones[3].Minutes / 1440,
        };
    }

    class DayInfo
    {
        public DateTimeOffset DateTime;
        public int TotalBeats;
        public float Offline;
        public float OutOfRange;
        public float FatBurn;
        public float Cardio;
        public float Peak;
    }
}